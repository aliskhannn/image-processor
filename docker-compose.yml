services:
  frontend:
    build:
      context: ./website
    container_name: processor-ui
    ports:
      - "3000:80"   # http://localhost:3000
    environment:
      - VITE_API_URL=http://comments:8080
    depends_on:
      - image-processor
    networks:
      - app-network

  image-processor:
    build: ./
    command: ./image-processor
    container_name: processor
    ports:
      - "8080:8080"
    depends_on:
      minio:
        condition: service_healthy
      db:
        condition: service_healthy
      migrator:
        condition: service_completed_successfully
      init-kafka:
        condition: service_completed_successfully
      kafka:
        condition: service_healthy
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
    env_file:
      - .env
    networks:
      - app-network

  migrator:
    image: kukymbr/goose-docker:3.24.2
    container_name: migrator
    command: up
    depends_on:
      db:
        condition: service_healthy
    environment:
      - GOOSE_DRIVER=${GOOSE_DRIVER}
      - GOOSE_DBSTRING=host=${DB_HOST} port=${DB_PORT} user=${DB_USER} password=${DB_PASSWORD} dbname=${DB_NAME}
      - GOOSE_MIGRATION_DIR=${GOOSE_MIGRATION_DIR}
    env_file:
      - .env
    healthcheck:
      test: [ "CMD", "sh", "-c", "exit 0" ]
      interval: 5s
      timeout: 3s
      retries: 1
    volumes:
      - ./migrations:/migrations
    networks:
      - app-network

  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - minio_data:/data
    networks:
      - app-network

  db:
    image: postgres
    restart: always
    container_name: postgres
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    env_file:
      - .env
    ports:
      - "5434:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  init-kafka:
    image: bitnami/kafka:latest
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: [ '/bin/sh', '-c' ]
    networks:
      - app-network
    command: |
      "
      kafka-topics.sh --create --if-not-exists --topic image.uploaded --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1
      "

  kafka:
    image: bitnami/kafka:latest
    ports:
      - "9092:9092"
    container_name: kafka
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    healthcheck:
      test: [ "CMD", "kafka-topics.sh", "--bootstrap-server", "kafka:9092", "--list" ]
      interval: 10s
      timeout: 5s
      retries: 10
    volumes:
      - kafka_data:/bitnami/kafka
    networks:
      - app-network

volumes:
  postgres_data:
  kafka_data:
  minio_data:

networks:
  app-network: